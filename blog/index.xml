<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Damien Beaufils</title>
    <link>https://damienbeaufils.github.io/blog/</link>
    <description>Recent content in Blog on Damien Beaufils</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ca</language>
    
	<atom:link href="https://damienbeaufils.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Server-Sent Events with Nuxt.js (Vue.js) and Nginx proxy</title>
      <link>https://damienbeaufils.github.io/blog/server-sent-events-with-nuxt-js-vue-js-and-nginx-proxy/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/blog/server-sent-events-with-nuxt-js-vue-js-and-nginx-proxy/</guid>
      <description>Suppose you have a Nuxt.js (Vue.js) application which calls a backend and which is behind a Nginx reverse proxy. If your backend stream Server-Sent Events (SSE) using text/event-stream content-type, you may have these errors: 504 (Gateway Time-out) or ERR_INCOMPLETE_CHUNKED_ENCODING (in Chrome).
If you want to make SSE works with your Nuxt.js application which is behind a Nginx reverse proxy, you have to do 2 things :
Enable long running connections in Nginx Add these lines in your Nginx configuration:</description>
    </item>
    
    <item>
      <title>Docker in Jenkins in Docker</title>
      <link>https://damienbeaufils.github.io/blog/docker-in-jenkins-in-docker/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/blog/docker-in-jenkins-in-docker/</guid>
      <description>You mad?
Really, you should not do this.
If you&amp;rsquo;re still here and want to do this, check this GitHub repository: https://github.com/damienbeaufils/docker-in-jenkins-in-docker
You&amp;rsquo;ve been warned.</description>
    </item>
    
    <item>
      <title>How to properly encrypt data using JPA converters and Spring Data JPA</title>
      <link>https://damienbeaufils.github.io/blog/how-to-properly-encrypt-data-using-jpa-converters-and-spring-data-jpa/</link>
      <pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/blog/how-to-properly-encrypt-data-using-jpa-converters-and-spring-data-jpa/</guid>
      <description>TL;DR: all code is directly available on GitHub: https://github.com/damienbeaufils/spring-data-jpa-encryption-example
Each time I want to encrypt entity fields values with JPA converters, I end up reading this blog post. This example is clear and functional, but has no unit or integration tests, and I thought the code could be more decoupled to avoid duplication when having multiple converters.
So I wrote an example using Spring Boot and Spring Data JPA, with a User entity which have different fields: id (a Long), firstName (a String), lastName (a String), email (a String), birthDate (a LocalDate) and creationDate (a LocalDateTime).</description>
    </item>
    
    <item>
      <title>Overriding a String List configuration key using Java System properties</title>
      <link>https://damienbeaufils.github.io/blog/overriding-a-string-list-configuration-key-using-java-system-properties/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/blog/overriding-a-string-list-configuration-key-using-java-system-properties/</guid>
      <description>With Play Framework, you can override configuration keys by specifying them as Java System properties. Example:
activator run -Dsome.key=&amp;#34;some.value&amp;#34; But if you have a String List key, you cannot override it like in the configuration file. Example using the trusted proxies configuration:
activator run -Dplay.http.forwarded.trustedProxies=\[&amp;#34;127.0.0.0/8&amp;#34;,&amp;#34;10.0.0.0/8&amp;#34;\] You will have this runtime error:
Configuration error\[system properties: play.http.forwarded.trustedProxies has type STRING rather than LIST\] To avoid this, you have to specify each entry of the list using the entry index:</description>
    </item>
    
    <item>
      <title>Implementing a SOAP client with CXF using Play Framework 2.x</title>
      <link>https://damienbeaufils.github.io/blog/implementing-a-soap-client-with-cxf-using-play-framework-2-x/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/blog/implementing-a-soap-client-with-cxf-using-play-framework-2-x/</guid>
      <description>TL;DR: if you want to skip the tutorial, all code is directly available on GitHub: https://github.com/damienbeaufils/soap-client-with-cxf-using-play
EDIT June 2016: code on my GitHub repository updated for Play Framework 2.5! Play 2.4 version is still available here.
I was working on a new client product, and I had to plug a web application built with Play Framework (and then sbt) to SOAP web services. How to do it?
The need: be able to generate Java classes from one or many WSDL files, and use those classes with Play 2.</description>
    </item>
    
  </channel>
</rss>