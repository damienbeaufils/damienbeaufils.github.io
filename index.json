[{"categories":null,"contents":"Un melon d\u0026rsquo;eau, c\u0026rsquo;est vert à l\u0026rsquo;extérieur et rouge à l\u0026rsquo;intérieur. La couverture de code par les tests, ça peut être la même chose : on a un beau score élevé de couverture, mais on a toujours des défauts déployés régulièrement en production malgré tout.\nEn bref, un faux sentiment de sécurité de l\u0026rsquo;extérieur, et quand on creuse, on a à l\u0026rsquo;intérieur des tests automatisés qui ne vérifient pas assez de choses concrètement.\nDans cette conférence, je vous expliquerai en quoi la couverture de code est un indicateur de non-qualité et que des outils comme les tests de mutation peuvent mesurer l\u0026rsquo;efficacité réelle des tests, afin de produire une métrique fiable sur la qualité et la pertinence de vos tests automatisés.\n  ","permalink":"https://damienbeaufils.github.io/publications/la-couverture-de-code-un-indicateur-melon-d-eau/","tags":["Software Craftsmanship","Code coverage","Mutation testing","Stryker","KPI"],"title":"La couverture de code : un indicateur melon d'eau ?"},{"categories":null,"contents":"You hear it since you started programming: you have to remove, remove and remove code duplication!\nWhy? If you have ever worked with a legacy project, when there was code duplication, the same bug in the code had to be corrected in several places, which drove you crazy. And I don’t even talk about introducing new features.\nEven quality tools like SonarQube tells you about code duplication percentage, with a heavy hint: if you have duplication, it’s bad. And if your manager sees these percentages, he may show up asking you “Why are we having 6% duplication on this project? You need to do something about it!”.\nAnd in the end, they’re right: removing code duplication eliminates code redundancy in order to make your product easier to maintain and to add new features. It’s the famous principle of DRY: Don’t Repeat Yourself“.\n","permalink":"https://damienbeaufils.github.io/publications/to-dry-or-not-to-dry/","tags":["Software Craftsmanship","Design"],"title":"To DRY or not to DRY?"},{"categories":null,"contents":"Bien souvent, des projets démarrent dans le brouillard et le chaos. Qu\u0026rsquo;ils soient en agile ou non. Et bien trop souvent, une purée de pois vous accompagne tout le long du projet et vous emmène droit dans le mur, sans que vous le sachiez. Les victimes : vous, et votre client.\nDans ce retour d\u0026rsquo;expérience, nous vous partagerons comment allumer des feux anti-brouillards. Concrètement, des pratiques facilement actionnables pour vous, votre équipe et votre client, afin d\u0026rsquo;améliorer les conditions de réalisation et de pilotage de vos futurs projets.\nNous évoquerons des sujets tels que le mob programming, les tracer bullet ou la rétrospective technique, qui vous permettront de transformer ce mur en petits obstacles franchissables.\n","permalink":"https://damienbeaufils.github.io/publications/guide-anti-frustration-pour-navigation-en-projet-trouble/","tags":["Software Craftsmanship","Mob programming","Tracer Bullet","Technical retrospective"],"title":"Guide anti-frustration pour navigation en projet trouble"},{"categories":null,"contents":"« Tests unitaires, tests d\u0026rsquo;intégration, tests fonctionnels. Tous sont utiles, mais chacun a un usage\u0026hellip; Comment assurer une répartition optimale de chaque \u0026ldquo;couche\u0026rdquo; de tests ? Sur quelles bases ? Damien Beaufils nous explique tout. »\n","permalink":"https://damienbeaufils.github.io/publications/cafe-craft-podcast-15-renverser-la-pyramide-des-tests/","tags":["Software Craftsmanship","Test Pyramid","Test Driven Development"],"title":"Café Craft podcast #15 : Renverser la pyramide des tests !"},{"categories":null,"contents":"« Pour la sortie de notre Parcours Tech lead, nous avons rencontré Damien Beaufils, développeur et consultant chez OCTO Technology. Damien occupe aussi notamment le rôle de Tech lead sur des projets de développement.\nNous avons posé à Damien des questions pour vous aider à mieux voir ce qu’est, en pratique, le rôle de Tech lead : comment on s’y forme, quels en sont ses avantages et inconvénients, ses missions principales et ses responsabilités. »\n","permalink":"https://damienbeaufils.github.io/publications/parole-d-expert-le-role-de-tech-lead-selon-damien-beaufils/","tags":["Software Craftsmanship","Tech Lead"],"title":"Parole d’expert : Le rôle de Tech lead selon Damien Beaufils"},{"categories":null,"contents":"Être Tech Lead, c\u0026rsquo;est être au service de l\u0026rsquo;équipe en étant à la fois formateur, facilitateur, expert et coach. Mais quand l\u0026rsquo;équipe projet est composée de plus de 15 personnes, dont 10 développeur·euse·s, comment remplir ce rôle tout en continuant à prendre le temps de développer avec l\u0026rsquo;équipe, et ce sans finir sous l\u0026rsquo;eau ?\nDans cette conférence, je vous partagerai un retour d\u0026rsquo;expérience d'1 an dans le rôle du Tech Lead d\u0026rsquo;une équipe de développement travaillant sur un site web grand public. Cette équipe de 10 développeur·euse·s était mixte à plusieurs titres : multi-compétences, homme/femme mais également client/prestataire.\nAprès une présentation générale des différentes facettes du Tech Lead, je vous détaillerai les pratiques et mesures qui ont été mises en place pour améliorer la propriété collective du code et la qualité du produit au quotidien. Je vous partagerai également les succès qui ont favorisés l\u0026rsquo;apprentissage, la progression et l\u0026rsquo;autonomie de l\u0026rsquo;équipe (sans avoir à être un super-héros ou un dictateur), mais aussi les problèmes rencontrés et ce qui a moins bien fonctionné.\n  ","permalink":"https://damienbeaufils.github.io/publications/comment-etre-tech-lead-dans-une-pizza-team-xxl-sans-finir-sous-l-eau/","tags":["Software Craftsmanship","Test Driven Development","Test Pyramid","Tech Lead","Technical Debt"],"title":"Comment être Tech Lead dans une pizza team XXL sans finir sous l'eau ?"},{"categories":null,"contents":"Depuis 2015, la DILA accompagnée par OCTO Technology, s’est lancée dans la refonte du site officiel de l’administration française, le portail unique de renseignement administratif et d’accès aux services en ligne. Ce projet s’inscrit dans un programme global de simplification de l’offre d’information administrative et de développement de nouveaux services de relation à l’usager.\n9 mois plus tard, Service-Public.fr est entièrement neuf et reste le site majeur de l’administration. Depuis, il intègre en continu de nouveaux services de qualité au rythme des mises en production toutes les 2 semaines.\nÀ l’occasion de ce petit-déjeuner, les actrices et les acteurs du projet service-public.fr (DILA et OCTO) vous proposent un retour d’expérience très concret sur 6 points clés :\n  Le pilotage d\u0026rsquo;un projet agile à travers les différentes phases du projet. Présenté par Frédéric Burel \u0026amp; Maxence Modelin\n  Les usagers au coeur de la conception de service-public.fr. Présenté par Flavien Testevuide \u0026amp; Géraldine Da Sylva\n  Animer une large équipe fonctionnelle dans un projet agile. Présenté par Katia Sonntag \u0026amp; Nicolas Fournier\n  Les pratiques au quotidien pour assurer la propriété collective du code applicatif ainsi que la qualité du produit. Présenté par Stéphane Colle \u0026amp; Damien Beaufils\n  Principes clés DevOps à mettre en place pour déployer sereinement en production toutes les 2 semaines. Présenté par Alexandre Otparlic \u0026amp; Tanguy Patte\n  Intégrer nativement les normes d’accessibilité dans le processus de construction du produit. Présenté par Anne Cavalier \u0026amp; Adrien Saunier\n  ","permalink":"https://damienbeaufils.github.io/publications/petit-dejeuner-secteur-public-rex-du-site-service-public-fr-/","tags":["Software Craftsmanship","Test Driven Development","Test Pyramid","Tech Lead","Technical Debt"],"title":"Petit-déjeuner « Secteur public : REX du site service-public.fr »"},{"categories":null,"contents":"Retour d\u0026rsquo;expérience d\u0026rsquo;un projet de refonte d\u0026rsquo;une billetterie en ligne sur dix mois. L\u0026rsquo;enjeu attendu était les performances du back-end pour tenir la charge lors de l\u0026rsquo;ouverture des ventes. L\u0026rsquo;enjeu réel a été de maintenir la base de code aussi bien back-end que front-end au fil des itérations.\nUne équipe composée d\u0026rsquo;un Tech Lead et de quatre développeurs a réussi à livrer un produit maintenable en plus d\u0026rsquo;être bien conçu.\nAprès une brève présentation de l\u0026rsquo;architecture et des technologies utilisées, nous vous présenterons la méthodologie mise en place de l\u0026rsquo;itération 0 à l\u0026rsquo;itération 20. Nous vous expliquerons en quoi Software Craftsmanship est une extension naturelle des méthodologies agiles, et ce que les pratiques ont apporté à l\u0026rsquo;équipe de développement, au métier et à la DSI.\n  ","permalink":"https://damienbeaufils.github.io/publications/developpement-artisanal-d-un-logiciel-en-20-iterations/","tags":["Software Craftsmanship","Test Driven Development","Test Pyramid","Tech Lead","Technical Debt"],"title":"Développement artisanal d'un logiciel en 20 itérations"},{"categories":null,"contents":"« In this episode, I talked to Damien Beaufils, a french software craftsman working in Paris. Damien shared the experience he made on his current project ; how he helped his team focus on quality to improve the whole software. We talked about the different kind of tests, the test pyramid and Damien even shared a very good recipe on how to improve test quality in a legacy or project lacking tests. Nota: We unfortunately had a couple hickups toward the middle of the recording, but what Damien was saying is pretty clear anyway! »\n","permalink":"https://damienbeaufils.github.io/publications/developer-s-journey-podcast-16/","tags":["Software Craftsmanship","Testing","Test Pyramid"],"title":"Developer's Journey podcast #16"},{"categories":null,"contents":"IAS is the official archive repository for the CoRoT mission data. In addition of data archiving in a secure way, IAS proposes several interfaces corresponding to different level of data and different kind of users. We present here the recent changes made aiming at improving our interfaces with real added-value services related to the available data. In particular, we provide a set of web services which permit to give access to additional informations on a given target such as online lightcurve plotting or periodogram computing and plotting. In addition, future developments are outlined.\n","permalink":"https://damienbeaufils.github.io/publications/web-services-for-ias-corot-archives/","tags":["REST","Web Services","Astrophysics"],"title":"Web Services for IAS CoRoT archives"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nThis implementation uses Fusejs, jquery and mark.js\nSearch also depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] ","permalink":"https://damienbeaufils.github.io/search/","tags":null,"title":"Search Results"},{"categories":null,"contents":"Suppose you have a Nuxt.js (Vue.js) application which calls a backend and which is behind a Nginx reverse proxy. If your backend stream Server-Sent Events (SSE) using text/event-stream content-type, you may have these errors: 504 (Gateway Time-out) or ERR_INCOMPLETE_CHUNKED_ENCODING (in Chrome).\nIf you want to make SSE works with your Nuxt.js application which is behind a Nginx reverse proxy, you have to do 2 things :\nEnable long running connections in Nginx Add these lines in your Nginx configuration:\nproxy_http_version 1.1; proxy_set_header Connection \u0026#34;\u0026#34;; And don\u0026rsquo;t forget to add the X-Accel-Buffering: no; header in the stream response sent by your backend. Full explanation in this answer: https://serverfault.com/a/801629\nDisable gzip compression in Nuxt Because compression does not work well with event streams. Add these lines in your nuxt.config.js configuration file:\nrender: { gzip: false } More configuration available here: https://nuxtjs.org/api/configuration-render\nThat\u0026rsquo;s all folks!\n","permalink":"https://damienbeaufils.github.io/blog/server-sent-events-with-nuxt-js-vue-js-and-nginx-proxy/","tags":["SSE","Nuxt.js","Vue.js","node","Nginx","event stream"],"title":"Server-Sent Events with Nuxt.js (Vue.js) and Nginx proxy"},{"categories":null,"contents":"You mad?\nReally, you should not do this.\nIf you\u0026rsquo;re still here and want to do this, check this GitHub repository: https://github.com/damienbeaufils/docker-in-jenkins-in-docker\nYou\u0026rsquo;ve been warned.\n","permalink":"https://damienbeaufils.github.io/blog/docker-in-jenkins-in-docker/","tags":["Docker","Jenkins"],"title":"Docker in Jenkins in Docker"},{"categories":null,"contents":"TL;DR: all code is directly available on GitHub: https://github.com/damienbeaufils/spring-data-jpa-encryption-example\nEach time I want to encrypt entity fields values with JPA converters, I end up reading this blog post. This example is clear and functional, but has no unit or integration tests, and I thought the code could be more decoupled to avoid duplication when having multiple converters.\nSo I wrote an example using Spring Boot and Spring Data JPA, with a User entity which have different fields: id (a Long), firstName (a String), lastName (a String), email (a String), birthDate (a LocalDate) and creationDate (a LocalDateTime). All fields except id are encrypted in database using AES algorithm.\nEncryption is enabled on fields using different JPA converters: StringCryptoConverter, LocalDateCryptoConverter and LocalDateTimeCryptoConverter. This is verified with UserRepositoryTest integration test, and all converters are unit tested.\nEncryption key is empty by default (see example.database.encryption.key configuration key in application.yml). You have to provide an encryption key in configuration or specify it in options when running application.\nFeel free to fork \u0026amp; enjoy!\n","permalink":"https://damienbeaufils.github.io/blog/how-to-properly-encrypt-data-using-jpa-converters-and-spring-data-jpa/","tags":["Java","Spring Data JPA","Spring Boot","encryption","converter","unit testing","integration testing"],"title":"How to properly encrypt data using JPA converters and Spring Data JPA"},{"categories":null,"contents":"With Play Framework, you can override configuration keys by specifying them as Java System properties. Example:\nactivator run -Dsome.key=\u0026#34;some.value\u0026#34; But if you have a String List key, you cannot override it like in the configuration file. Example using the trusted proxies configuration:\nactivator run -Dplay.http.forwarded.trustedProxies=\\[\u0026#34;127.0.0.0/8\u0026#34;,\u0026#34;10.0.0.0/8\u0026#34;\\] You will have this runtime error:\nConfiguration error\\[system properties: play.http.forwarded.trustedProxies has type STRING rather than LIST\\] To avoid this, you have to specify each entry of the list using the entry index:\nactivator run -Dplay.http.forwarded.trustedProxies.0=127.0.0.0/8 -Dplay.http.forwarded.trustedProxies.1=10.0.0.0/8 Note that there are no double quotes around the values. I encountered some issues when using quotes, and it works fine without them.\n","permalink":"https://damienbeaufils.github.io/blog/overriding-a-string-list-configuration-key-using-java-system-properties/","tags":["Play","sbt","configuration","bash"],"title":"Overriding a String List configuration key using Java System properties"},{"categories":null,"contents":"TL;DR: if you want to skip the tutorial, all code is directly available on GitHub: https://github.com/damienbeaufils/soap-client-with-cxf-using-play\nEDIT June 2016: code on my GitHub repository updated for Play Framework 2.5! Play 2.4 version is still available here.\nI was working on a new client product, and I had to plug a web application built with Play Framework (and then sbt) to SOAP web services. How to do it?\nThe need: be able to generate Java classes from one or many WSDL files, and use those classes with Play 2.4 dependency injection (which use Guice as implementation).\nThe issue: no out-of-the-box SOAP support on Play.\nThe good news: there is an official plugin from Typesafe which answer the need: play-soap-sbt. It promises a reactive implementation of SOAP web services calls from your application.\nThe bad news: this plugin is a part of the Typesafe Reactive Plateform suite, and you have to pay an unknown amount (I didn\u0026rsquo;t found any value on the website) to be able to use this plugin in your application.\nComing from the Java/Groovy world, I often used Spring framework. When I had to use SOAP in an application, I used CXF most of the time, which works perfectly with Spring. So I asked myself how to use CXF with Play?\nI didn\u0026rsquo;t found any miracle answer on the web, so I built a custom solution, inspired mainly by play-cxf. So here is a tutorial, step by step, to implement a SOAP client with CXF 3.1.x using Play Framework 2.4.x:\nStep 1: create a new Play application with activator Optional step if you already have an existing application.\n# cf. https://www.playframework.com/documentation/2.4.x/NewApplication activator new soap-client-with-cxf-using-play play-java Step 2: download a WSDL and store it in the project I use for this tutorial the GlobalWeather SOAP web service. Once the WSDL downloaded, the file is saved in the conf/wsdls folder:\ncd soap-client-with-cxf-using-play/conf mkdir wsdls wget http://www.webservicex.net/globalweather.asmx?WSDL -O wsdls/globalweather.wsdl Step 3: add the sbt-cxf-wsdl2java plugin In the project/plugins.sbt file:\nresolvers += \u0026#34;Sonatype Repository\u0026#34; at \u0026#34;https://oss.sonatype.org/content/groups/public\u0026#34; addSbtPlugin(\u0026#34;com.ebiznext.sbt.plugins\u0026#34; % \u0026#34;sbt-cxf-wsdl2java\u0026#34; % \u0026#34;0.1.4\u0026#34;) Step 4: add CXF required dependencies In the build.sbt file:\nval cxfVersion: String = \u0026#34;3.1.4\u0026#34; libraryDependencies ++= Seq( ... \u0026#34;org.apache.cxf\u0026#34; % \u0026#34;cxf-rt-frontend-jaxws\u0026#34; % cxfVersion, \u0026#34;org.apache.cxf\u0026#34; % \u0026#34;cxf-rt-transports-http\u0026#34; % cxfVersion ) Step 5: configure the wsdl2java task to automatically generate the classes corresponding to the downloaded WSDL In the build.sbt file:\n// CXF wsdl2java configuration Seq(cxf.settings: _*) cxf.cxfVersion := cxfVersion cxf.wsdls := Seq( cxf.Wsdl((resourceDirectory in Compile).value / \u0026#34;wsdls/globalweather.wsdl\u0026#34;, Seq(\u0026#34;-mark-generated\u0026#34;, \u0026#34;-p\u0026#34;, \u0026#34;com.global.weather\u0026#34;), \u0026#34;globalweather\u0026#34;) ) Step 6: launch wsdl2java task activator clean wsdl2java or\nsbt clean wsdl2java Generated classes should then be found in target/cxf/globalweather folder:\ntree target/cxf/globalweather target/cxf/globalweather/ └── com └── global └── weather ├── GetCitiesByCountry.java ├── GetCitiesByCountryResponse.java ├── GetWeather.java ├── GetWeatherResponse.java ├── GlobalWeatherHttpGet_GlobalWeatherHttpGet_Client.java ├── GlobalWeatherHttpGet.java ├── GlobalWeatherHttpPost_GlobalWeatherHttpPost_Client.java ├── GlobalWeatherHttpPost.java ├── GlobalWeather.java ├── GlobalWeatherSoap_GlobalWeatherSoap12_Client.java ├── GlobalWeatherSoap_GlobalWeatherSoap_Client.java ├── GlobalWeatherSoap.java ├── ObjectFactory.java └── package-info.java 3 directories, 14 files Step 7: add Spring Context dependency Generated classes are now in the classpath, but we have to use Spring to be able to instanciate and use CXF JAX-WS client.\nlibraryDependencies ++= Seq( ... \u0026#34;org.springframework\u0026#34; % \u0026#34;spring-context\u0026#34; % \u0026#34;4.2.4.RELEASE\u0026#34; ) Step 8: declare CXF generated JAX-WS client in the Spring context In the CXF generated sources, an interface with @WebService annotation has been created and we can use it to easily declare the JAX-WS client. In this example, Spring context file is named applicationContext.xml and stored in conf folder:\n\u0026lt;beans xmlns=\u0026#34;http://www.springframework.org/schema/beans\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:jaxws=\u0026#34;http://cxf.apache.org/jaxws\u0026#34; xsi:schemaLocation=\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd\u0026#34;\u0026gt; \u0026lt;import resource=\u0026#34;classpath*:META-INF/cxf/cxf.xml\u0026#34;/\u0026gt; \u0026lt;jaxws:client id=\u0026#34;globalWeatherSoapClient\u0026#34; serviceClass=\u0026#34;com.global.weather.GlobalWeatherSoap\u0026#34; address=\u0026#34;${global.weather.host}/globalweather.asmx\u0026#34;/\u0026gt; \u0026lt;/beans\u0026gt; Step 9: configure Play to load Spring context when application starts For this, it is necessary to create a module, which will programmatically load Spring context, and to declare it in application configuration.\nIn this example, module is named ApplicationContextBinderModule and stored in app/modules folder:\npackage modules; import com.google.inject.AbstractModule; import org.springframework.context.support.ClassPathXmlApplicationContext; public class ApplicationContextBinderModule extends AbstractModule { @Override protected void configure() { ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\u0026#34;applicationContext.xml\u0026#34;); applicationContext.start(); applicationContext.registerShutdownHook(); } } The module is then declared in application configuration. Here in the main configuration file application.conf:\nplay.modules.enabled += \u0026#34;modules.ApplicationContextBinderModule\u0026#34; Step 10: configure Play dependency injection (Guice) to be able to load the JAX-WS client with the @Inject annotation With the Spring context loaded, a bean globalWeatherSoapClient exists, so we have now to tell to Guice which instance to bind when we want to inject a GlobalWeatherSoap dependency:\npackage modules; import com.global.weather.GlobalWeatherSoap; import com.google.inject.AbstractModule; import org.springframework.context.support.ClassPathXmlApplicationContext; public class ApplicationContextBinderModule extends AbstractModule { @Override protected void configure() { ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(\u0026#34;applicationContext.xml\u0026#34;); applicationContext.start(); applicationContext.registerShutdownHook(); // Guice instance binding  bind(GlobalWeatherSoap.class).toInstance((GlobalWeatherSoap) applicationContext.getBean(\u0026#34;globalWeatherSoapClient\u0026#34;)); } } Step 11: inject the JAX-WS client to call SOAP web services Example in a GlobalWeatherController controller:\n# Routes # ~~~~ GET /cities/:country @controllers.GlobalWeatherController.getCities(country: String) GET /weather/:country/:city @controllers.GlobalWeatherController.getWeather(country: String, city: String) package controllers; import com.global.weather.GlobalWeatherSoap; import play.mvc.Controller; import play.mvc.Result; import javax.inject.Inject; public class GlobalWeatherController extends Controller { @Inject private GlobalWeatherSoap globalWeatherSoapClient; public Result getCities(String countryName) { String cities = globalWeatherSoapClient.getCitiesByCountry(countryName); return ok(cities).as(\u0026#34;text/xml\u0026#34;); } public Result getWeather(String countryName, String cityName) { String weather = globalWeatherSoapClient.getWeather(cityName, countryName); return ok(weather).as(\u0026#34;text/xml\u0026#34;); } } Step 12: run and test! activator run or\nsbt run and then\ncurl http://localhost:9000/cities/France or\ncurl http://localhost:9000/weather/France/Cognac Second request result:\n\u0026lt;CurrentWeather\u0026gt; \u0026lt;Location\u0026gt;Cognac, France (LFBG) 45-40N 000-19W 31M\u0026lt;/Location\u0026gt; \u0026lt;Time\u0026gt;Nov 09, 2015 - 07:30 AM EST / 2015.11.09 1230 UTC\u0026lt;/Time\u0026gt; \u0026lt;Wind\u0026gt; from the SSW (200 degrees) at 7 MPH (6 KT):0\u0026lt;/Wind\u0026gt; \u0026lt;Visibility\u0026gt; greater than 7 mile(s):0\u0026lt;/Visibility\u0026gt; \u0026lt;SkyConditions\u0026gt; overcast\u0026lt;/SkyConditions\u0026gt; \u0026lt;Temperature\u0026gt; 64 F (18 C)\u0026lt;/Temperature\u0026gt; \u0026lt;DewPoint\u0026gt; 59 F (15 C)\u0026lt;/DewPoint\u0026gt; \u0026lt;RelativeHumidity\u0026gt; 82%\u0026lt;/RelativeHumidity\u0026gt; \u0026lt;Pressure\u0026gt; 30.47 in. Hg (1032 hPa)\u0026lt;/Pressure\u0026gt; \u0026lt;Status\u0026gt;Success\u0026lt;/Status\u0026gt; \u0026lt;/CurrentWeather\u0026gt; Step 13 (bonus): use Play configuration in Spring context The applicationContext.xml file we use contains only hard-coded values. When we use SOAP web services, we often have several environments (dev vs. prod).\nIt is possible to load configuration files in Spring context, with PropertySourcesPlaceholderConfigurer, but it is designed to read properties files and not HOCON files, which are used by Play Framework.\nSo I created a HoconPropertySourcesPlaceholderConfigurer class, which is able to read a *.conf file in order to use it in Spring context with SpEL.\npackage utils; import org.apache.commons.lang3.StringUtils; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.ConfigurableListableBeanFactory; import org.springframework.context.support.PropertySourcesPlaceholderConfigurer; import org.springframework.core.env.ConfigurablePropertyResolver; import org.springframework.util.StringValueResolver; public class HoconPropertySourcesPlaceholderConfigurer extends PropertySourcesPlaceholderConfigurer { @Override protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, ConfigurablePropertyResolver propertyResolver) throws BeansException { propertyResolver.setPlaceholderPrefix(this.placeholderPrefix); propertyResolver.setPlaceholderSuffix(this.placeholderSuffix); propertyResolver.setValueSeparator(this.valueSeparator); StringValueResolver valueResolver = strVal -\u0026gt; { String resolved = ignoreUnresolvablePlaceholders ? propertyResolver.resolvePlaceholders(strVal) : propertyResolver.resolveRequiredPlaceholders(strVal); return resolved.equals(nullValue) ? null : StringUtils.replace(resolved, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;\u0026#34;); }; doProcessProperties(beanFactoryToProcess, valueResolver); } } The applicationContext.xml file then become:\n\u0026lt;beans xmlns=\u0026#34;http://www.springframework.org/schema/beans\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:jaxws=\u0026#34;http://cxf.apache.org/jaxws\u0026#34; xmlns:http-conf=\u0026#34;http://cxf.apache.org/transports/http/configuration\u0026#34; xsi:schemaLocation=\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd\u0026#34;\u0026gt; \u0026lt;import resource=\u0026#34;classpath*:META-INF/cxf/cxf.xml\u0026#34;/\u0026gt; \u0026lt;bean class=\u0026#34;utils.HoconPropertySourcesPlaceholderConfigurer\u0026#34;\u0026gt; \u0026lt;!-- Load configuration file defined in config.resource (see https://www.playframework.com/documentation/2.4.x/ProductionConfiguration) --\u0026gt; \u0026lt;!-- If no config.resource defined, use application.conf --\u0026gt; \u0026lt;property name=\u0026#34;location\u0026#34; value=\u0026#34;#{systemProperties[\u0026#39;config.resource\u0026#39;] ?: \u0026#39;application.conf\u0026#39;}\u0026#34;/\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;jaxws:client id=\u0026#34;globalWeatherSoapClient\u0026#34; serviceClass=\u0026#34;com.global.weather.GlobalWeatherSoap\u0026#34; address=\u0026#34;${global.weather.host}/globalweather.asmx\u0026#34;/\u0026gt; \u0026lt;http-conf:conduit name=\u0026#34;${global.weather.host}/.*\u0026#34;\u0026gt; \u0026lt;http-conf:client ConnectionTimeout=\u0026#34;${global.weather.connection.timeout}\u0026#34; ReceiveTimeout=\u0026#34;${global.weather.response.timeout}\u0026#34; AllowChunking=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/http-conf:conduit\u0026gt; \u0026lt;/beans\u0026gt; And in configuration:\n# Global weather SOAP client configuration # ~~~~~ global.weather.host = \u0026#34;http://www.webservicex.net\u0026#34; global.weather.connection.timeout = 60000 global.weather.response.timeout = 60000 Final code All the code of this tutorial is available on GitHub: https://github.com/damienbeaufils/soap-client-with-cxf-using-play\nFeel free to fork \u0026amp; enjoy!\n","permalink":"https://damienbeaufils.github.io/blog/implementing-a-soap-client-with-cxf-using-play-framework-2-x/","tags":["Java","Play","sbt","SOAP","CXF","WSDL","Guice","wsdl2java","Spring"],"title":"Implementing a SOAP client with CXF using Play Framework 2.x"}]