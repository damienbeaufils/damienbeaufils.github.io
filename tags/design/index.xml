<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Damien Beaufils</title>
    <link>https://damienbeaufils.github.io/tags/design/</link>
    <description>Recent content in Design on Damien Beaufils</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ca</language>
    <lastBuildDate>Tue, 13 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://damienbeaufils.github.io/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>To DRY or not to DRY?</title>
      <link>https://damienbeaufils.github.io/publications/to-dry-or-not-to-dry/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/publications/to-dry-or-not-to-dry/</guid>
      <description>You hear it since you started programming: you have to remove, remove and remove code duplication!
Why? If you have ever worked with a legacy project, when there was code duplication, the same bug in the code had to be corrected in several places, which drove you crazy. And I don’t even talk about introducing new features.
Even quality tools like SonarQube tells you about code duplication percentage, with a heavy hint: if you have duplication, it’s bad.</description>
    </item>
    
  </channel>
</rss>
