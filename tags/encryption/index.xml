<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>encryption on Damien Beaufils</title>
    <link>https://damienbeaufils.github.io/tags/encryption/</link>
    <description>Recent content in encryption on Damien Beaufils</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ca</language>
    <lastBuildDate>Fri, 21 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://damienbeaufils.github.io/tags/encryption/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to properly encrypt data using JPA converters and Spring Data JPA</title>
      <link>https://damienbeaufils.github.io/blog/how-to-properly-encrypt-data-using-jpa-converters-and-spring-data-jpa/</link>
      <pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://damienbeaufils.github.io/blog/how-to-properly-encrypt-data-using-jpa-converters-and-spring-data-jpa/</guid>
      <description>TL;DR: all code is directly available on GitHub: https://github.com/damienbeaufils/spring-data-jpa-encryption-example
Each time I want to encrypt entity fields values with JPA converters, I end up reading this blog post. This example is clear and functional, but has no unit or integration tests, and I thought the code could be more decoupled to avoid duplication when having multiple converters.
So I wrote an example using Spring Boot and Spring Data JPA, with a User entity which have different fields: id (a Long), firstName (a String), lastName (a String), email (a String), birthDate (a LocalDate) and creationDate (a LocalDateTime).</description>
    </item>
    
  </channel>
</rss>